#!/usr/bin/env node

const fs = require('fs');

const INPUT = require('../src/plugins/factoids/ecmabot-factoids');

const OUT_FILE = 'src/plugins/factoids/factoids.json';
const OUTPUT = {};

const RECENT_TIME = new Date(Date.UTC(2015, 0, 1, 0, 0, 0, 0));

function toISOString(value) {
  let timestamp = Number(RECENT_TIME);

  if (
    typeof value === 'string' &&
    /\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d{1,9})?Z$/.test(value)
  ) {
    timestamp = Date.parse(value);
  } else if (
    typeof value === 'number' &&
    value > Number(RECENT_TIME) &&
    value < Date.now()
  ) {
    timestamp = value;
  }

  return new Date(timestamp).toISOString();
}

function normalize(input) {
  if (!input) {
    return null;
  }

  const entry = {
    type: input.alias ? 'alias' : 'factoid',
    popularity: input.popularity || 0,
    changes: input.changes || [],
  };

  entry.changes = entry.changes.map((change) => ({
    date: toISOString(change.date),
    editor: (change.editor || 'unknown').toLowerCase(),
    value: change['new-value'],
    live: true,
  }));

  entry.changes.unshift({
    editor: (input.creator || 'unknown').toLowerCase(),
    date: toISOString(input.date),
    value: input.value || input.alias || null,
    live: true,
  });

  if (!entry.changes[0].value) {
    return null;
  }

  // Sort with newest entries first
  entry.changes.sort((a, b) => b.date.localeCompare(a.date.localeCompare));

  return entry;
}

function run() {
  const entries = Object.entries(INPUT.factoids).sort((a, b) =>
    a[0].localeCompare(b[0]),
  );
  for (const [key, value] of entries) {
    const entry = normalize(value);

    if (!entry) {
      console.error(`Invalid entry for ${key}: ${JSON.stringify(value)}`);
    } else {
      OUTPUT[key] = entry;
    }
  }

  const result = JSON.stringify(OUTPUT, null, 2);
  fs.writeFileSync(OUT_FILE, result);
}

run();
